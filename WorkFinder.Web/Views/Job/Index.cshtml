@model List<WorkFinder.Web.DTOs.Jobs.JobDto>
@{
    ViewData["Title"] = "Find Job";
}

<div class="job-listing-container">
    <!-- Header Section -->
    <div class="job-header">
        <div class="container">
            <div class="d-flex justify-content-between">
                <h1>Find Job</h1>
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="/">Home</a></li>
                        <li class="breadcrumb-item active">Find job</li>
                    </ol>
                </nav>
            </div>
            <!-- Search Section -->
            <div class="search-section">
                <div class="container">
                    <form id="jobFilterForm" method="get" action="@Url.Action("Index", "Job")">
                        <div class="search-box">
                            <div class="row">
                                <div class="col-md-3">
                                    <div class="search-input">
                                        <i class="fas fa-search"></i>
                                        <input type="text" name="keyword" value="@ViewBag.Keyword"
                                            placeholder="Job tittle, Keyword...">
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="search-input">
                                        <i class="fas fa-map-marker-alt"></i>
                                        <input type="text" name="location" value="@ViewBag.Location"
                                            placeholder="Location">
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="search-input">
                                        <i class="fa-solid fa-layer-group"></i>
                                        <select class="form-select" name="categoryId">
                                            <option value="">Select Category</option>
                                            @if (ViewBag.Categories != null)
                                            {
                                                @foreach (var category in ViewBag.Categories)
                                                {
                                                    if (ViewBag.CategoryId != null && ViewBag.CategoryId.ToString() ==
                                                    category.Id.ToString())
                                                    {
                                                        <option value="@category.Id" selected>@category.Name</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="@category.Id">@category.Name</option>
                                                    }
                                                }
                                            }
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-3 d-flex">
                                    <div class="dropdown me-2">
                                        <button class="btn btn-light dropdown-toggle" type="button"
                                            id="advanceFilterBtn" data-bs-toggle="modal"
                                            data-bs-target="#advancedFilterModal">
                                            Advance Filter <i class="fas fa-sliders-h ms-2"></i>
                                        </button>
                                    </div>
                                    <button type="submit" class="btn btn-primary find-btn">Find Job</button>
                                </div>
                            </div>
                        </div>

                        <!-- Hidden fields for advanced filter options -->
                        <input type="hidden" id="jobType" name="jobType" value="@ViewBag.JobType">
                        <input type="hidden" id="experienceLevel" name="experienceLevel"
                            value="@ViewBag.ExperienceLevel">
                        <input type="hidden" id="minSalary" name="minSalary" value="@ViewBag.MinSalary">
                        <input type="hidden" id="maxSalary" name="maxSalary" value="@ViewBag.MaxSalary">
                        <input type="hidden" id="jobLevel" name="jobLevel" value="@ViewBag.JobLevel">
                        <input type="hidden" id="postedAfter" name="postedAfter" value="@ViewBag.PostedAfter">
                    </form>
                    @await Component.InvokeAsync("AdvancedFilter", new {
                    jobType = ViewBag.JobType,
                                        experienceLevel = ViewBag.ExperienceLevel,
                                        minSalary = ViewBag.MinSalary,
                                        maxSalary = ViewBag.MaxSalary,
                                        jobLevel = ViewBag.JobLevel,
                                        postedAfter = ViewBag.PostedAfter
                                        })
                </div>
            </div>

        </div>
    </div>
    <!-- Job Listing Section -->
    <div class="job-listing container mt-4">
        <div class="d-flex justify-content-between mb-4">
            <div class="dropdown">
                <!-- Filter Tags -->
                <div class="filter-tags container mt-4">
                    <div class="d-flex">
                        <div class="filter-tag">
                            Design <i class="fas fa-times"></i>
                        </div>
                        <div class="filter-tag">
                            New York <i class="fas fa-times"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="d-flex gap-3">
                <button class="btn btn-light dropdown-toggle" type="button" id="sortDropdown" data-bs-toggle="dropdown">
                    Latest
                </button>
                <div class="dropdown">
                    <button class="btn btn-light dropdown-toggle" type="button" id="perPageDropdown"
                        data-bs-toggle="dropdown">
                        @ViewBag.PageSize per page
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item"
                                href="@Url.Action("Index", new { keyword = ViewBag.Keyword, location = ViewBag.Location, page = 1, pageSize = 12 })">12
                                per page</a></li>
                        <li><a class="dropdown-item"
                                href="@Url.Action("Index", new { keyword = ViewBag.Keyword, location = ViewBag.Location, page = 1, pageSize = 24 })">24
                                per page</a></li>
                        <li><a class="dropdown-item"
                                href="@Url.Action("Index", new { keyword = ViewBag.Keyword, location = ViewBag.Location, page = 1, pageSize = 48 })">48
                                per page</a></li>
                    </ul>
                </div>
                <div class="view-options">
                    <button id="grid-view-btn" class="btn btn-light active" data-view="grid"><i
                            class="fas fa-th"></i></button>
                    <button id="list-view-btn" class="btn btn-light" data-view="list"><i
                            class="fas fa-list"></i></button>
                </div>
            </div>
        </div>

        <!-- Job Cards -->
        <div id="grid-view-container" class="row g-4">
            @if (Model != null && Model.Any())
            {
                foreach (var job in Model)
                {
                    <div class="col-md-4 mb-4 mb-4">
                        <div class="job-card @(job.IsActive ? "highlighted" : "")" style="padding: 20px; margin-bottom: 15px;">
                            <div class="company-info d-flex align-items-center mb-3">
                                <div class="company-logo me-3">
                                    @if (!string.IsNullOrEmpty(job.Logo))
                                    {
                                        <img src="@job.Logo" alt="@job.CompanyName" class="img-fluid">
                                    }
                                    else
                                    {
                                        <img src="/images/default-company.png" alt="@job.CompanyName" class="img-fluid">
                                    }
                                </div>
                                <div>
                                    <h5 class="mb-1">@(string.IsNullOrEmpty(job.CompanyName) ? "Company Name" : job.CompanyName)
                                    </h5>
                                    @if (job.IsActive)
                                    {
                                        <span class="badge bg-danger">Featured</span>
                                    }
                                </div>
                            </div>
                            <div class="location mb-3">
                                <i class="fas fa-map-marker-alt me-2"></i> @job.Location
                            </div>
                            <h4 class="job-title mb-3">
                                <a href="/Job/@job.Id">@job.Title</a>
                            </h4>
                            <div class="job-meta d-flex justify-content-between">
                                <span class="me-2 badge bg-light text-dark">@job.JobType</span>
                                <span
                                    class="badge bg-light text-dark">$@(Math.Floor(job.SalaryMin/1000))K-@(Math.Floor(job.SalaryMax/1000))K/month</span>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12 text-center py-5">
                    <h3>Không tìm thấy việc làm nào phù hợp</h3>
                    <p>Vui lòng thay đổi tiêu chí tìm kiếm hoặc xem tất cả việc làm hiện có.</p>
                </div>
            }
        </div>
        <!-- List View Container - Initially Hidden -->
        <div id="list-view-container">
            @if (Model != null && Model.Any())
            {
                <div class="row">
                    @foreach (var job in Model)
                    {
                        @await Html.PartialAsync("Partials/Common/_JobItem", job)
                    }
                </div>
            }
        </div>
        <!-- Pagination -->
        @if (ViewBag.TotalPages > 1)
        {
            <div class="pagination-container mt-5 mb-5">
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center">
                        @if (ViewBag.CurrentPage > 1)
                        {
                            <li class="page-item">
                                <a class="page-link"
                                    href="@Url.Action("Index", new { keyword = ViewBag.Keyword, location = ViewBag.Location, page = ViewBag.CurrentPage - 1, pageSize = ViewBag.PageSize })"
                                    aria-label="Previous">
                                    <span aria-hidden="true">&laquo;</span>
                                </a>
                            </li>
                        }
                        else
                        {
                            <li class="page-item disabled">
                                <a class="page-link" href="#" aria-label="Previous">
                                    <span aria-hidden="true">&laquo;</span>
                                </a>
                            </li>
                        }

                        @for (int i = 1; i <= ViewBag.TotalPages; i++)
                        {
                            <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                                <a class="page-link"
                                    href="@Url.Action("Index", new { keyword = ViewBag.Keyword, location = ViewBag.Location, page = i, pageSize = ViewBag.PageSize })">
                                    @(i < 10 ? "0" + i : i.ToString())
                                </a>
                            </li>
                        }

                        @if (ViewBag.CurrentPage < ViewBag.TotalPages)
                        {
                            <li class="page-item">
                                <a class="page-link"
                                    href="@Url.Action("Index", new { keyword = ViewBag.Keyword, location = ViewBag.Location, page = ViewBag.CurrentPage + 1, pageSize = ViewBag.PageSize })"
                                    aria-label="Next">
                                    <span aria-hidden="true">&raquo;</span>
                                </a>
                            </li>
                        }
                        else
                        {
                            <li class="page-item disabled">
                                <a class="page-link" href="#" aria-label="Next">
                                    <span aria-hidden="true">&raquo;</span>
                                </a>
                            </li>
                        }
                    </ul>
                </nav>
            </div>
        }
    </div>
</div>
<style>
    /* Job Listing Styles */
    .job-header {
        background-color: #f8f9fa;
        padding: 15px 0;

    }

    .job-header h1 {
        font-size: 28px;
        font-weight: 600;
        margin-bottom: 10px;
    }

    .breadcrumb {
        background: transparent;
        padding: 0;
        margin: 0;
    }

    .search-section {
        margin-bottom: 30px;
    }

    .search-box {
        background-color: #fff;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.05);
    }

    .search-input {
        position: relative;

        font-size: 1.4rem;
        width: 100%;
        height: auto;
    }

    .search-input i {
        position: absolute;
        left: 15px;
        top: 50%;
        transform: translateY(-50%);
        color: var(--blue-300);
    }

    .search-input input,
    .search-input select {
        width: 100%;
        padding: 12px 15px 12px 40px;
        border: 1px solid #e0e0e0;
        border-radius: 5px;
        font-size: 1.4rem;
    }

    .find-btn {
        flex: 1;
        border-radius: 5px;
        height: 50px;
        padding: 12px 0;
        /* hoặc đặt chiều cao cụ thể giống với các nút khác */
    }

    .filter-tag {
        display: inline-block;
        background-color: #f8f9fa;
        padding: 5px 15px;
        border-radius: 30px;
        margin-right: 10px;
        font-size: 14px;
    }

    .filter-tag i {
        margin-left: 5px;
        cursor: pointer;
    }

    .job-card {
        background-color: #fff;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.05);
        height: 100%;
        transition: all 0.3s ease;
    }

    .job-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
    }

    .job-card.highlighted {
        border: 1px solid #0d6efd;
    }

    .company-info {
        display: flex;
        align-items: center;
        margin-bottom: 15px;
    }

    .company-logo {
        width: 50px;
        height: 50px;
        border-radius: 8px;
        overflow: hidden;
        margin-right: 15px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #f8f9fa;
    }

    .company-logo img {
        max-width: 100%;
        max-height: 100%;
    }

    .location {
        color: #6c757d;
        font-size: 14px;
        margin-bottom: 10px;
    }

    .job-title {
        font-size: 18px;
        font-weight: 600;

    }

    .job-meta {
        display: flex;

        color: #6c757d;
        font-size: 14px;
    }

    .pagination-container {
        display: flex;
        justify-content: center;
    }

    .pagination .page-item.active .page-link {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }

    .pagination .page-link {
        color: #0d6efd;
        border-radius: 50%;
        margin: 0 5px;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .view-options .btn {
        padding: 8px 12px;
    }

    .view-options .btn.active {
        background-color: #0d6efd;
        color: white;
    }
</style>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Get buttons and containers
            const viewButtons = document.querySelectorAll('.view-options button');
            const gridViewContainer = document.getElementById('grid-view-container');
            const listViewContainer = document.getElementById('list-view-container');

            // Add click event listener to each button
            viewButtons.forEach(button => {
                button.addEventListener('click', function () {
                    // Remove active class from all buttons
                    viewButtons.forEach(btn => btn.classList.remove('active'));

                    // Add active class to clicked button
                    this.classList.add('active');

                    // Get the view type
                    const viewType = this.dataset.view;

                    // Hide both views first
                    gridViewContainer.style.display = 'none';
                    listViewContainer.style.display = 'none';

                    // Show the selected view
                    if (viewType === 'list') {
                        listViewContainer.style.display = 'block';
                    } else {
                        gridViewContainer.style.display = 'flex';
                    }

                    // Save user preference to localStorage
                    localStorage.setItem('jobListingViewType', viewType);
                });
            });

            // Check if user has a saved preference and apply it
            const savedViewType = localStorage.getItem('jobListingViewType') || 'grid';
            const buttonToActivate = document.getElementById(`${savedViewType}-view-btn`);
            if (buttonToActivate) {
                // Trigger click event
                buttonToActivate.click();
            }
        });
    </script>
}