@model List<WorkFinder.Web.DTOs.Jobs.JobDto>
@{
    ViewData["Title"] = ViewBag.CompanyName != null ? $"Jobs at {ViewBag.CompanyName}" : "Find Job";
}

<div class="job-listing-container">
    <!-- Header Section -->
    <div class="job-header">
        <div class="container">
            <div class="d-flex justify-content-between">
                @if (ViewBag.CompanyId != null)
                {
                    <h1>Jobs at @ViewBag.CompanyName</h1>
                }
                else
                {
                    <h1>Find Job</h1>
                }
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="/">Home</a></li>
                        @if (ViewBag.CompanyId != null)
                        {
                            <li class="breadcrumb-item"><a href="/Company">Companies</a></li>
                            <li class="breadcrumb-item"><a href="/Company/@ViewBag.CompanyId">@ViewBag.CompanyName</a></li>
                            <li class="breadcrumb-item active">Open Positions</li>
                        }
                        else
                        {
                            <li class="breadcrumb-item active">Find job</li>
                        }
                    </ol>
                </nav>
            </div>

            @if (ViewBag.CompanyId != null)
            {
                <!-- Company Banner -->
                <div class="company-filter-banner mb-4">
                    <div class="d-flex align-items-center">
                        @if (!string.IsNullOrEmpty(ViewBag.CompanyLogo))
                        {
                            <img src="@ViewBag.CompanyLogo" alt="@ViewBag.CompanyName" class="company-logo me-3" />
                        }
                        <div>
                            <h4 class="mb-0">Showing all jobs at @ViewBag.CompanyName</h4>
                            <p class="text-muted mb-0">@Model.Count positions available</p>
                        </div>
                    </div>
                    <a href="/Job" class="btn btn-outline-primary">Clear filter</a>
                </div>
            }

            <!-- Search Section -->
            <div class="search-section">
                <div class="container">
                    <form id="jobFilterForm" method="get" action="@Url.Action("Index", "Job")">
                        <div class="search-box">
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="search-input">
                                        <i class="fas fa-search"></i>
                                        <input type="text" id="keyword-input" name="keyword" value="@ViewBag.Keyword"
                                            placeholder="Job title, Keyword..." class="debounce-input">
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="search-input">
                                        <i class="fas fa-map-marker-alt"></i>
                                        <input type="text" id="location-input" name="location" value="@ViewBag.Location"
                                            placeholder="Location" class="debounce-input">
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="d-flex">
                                        <div class="search-input me-2 flex-grow-1">
                                            <i class="fa-solid fa-layer-group"></i>
                                            <select class="form-select debounce-input" id="category-select"
                                                name="categoryId">
                                                <option value="">Select Category</option>
                                                @if (ViewBag.Categories != null)
                                                {
                                                    @foreach (var category in ViewBag.Categories)
                                                    {
                                                        if (ViewBag.CategoryId != null && ViewBag.CategoryId.ToString() ==
                                                        category.Id.ToString())
                                                        {
                                                            <option value="@category.Id" selected>@category.Name</option>
                                                        }
                                                        else
                                                        {
                                                            <option value="@category.Id">@category.Name</option>
                                                        }
                                                    }
                                                }
                                            </select>
                                        </div>
                                        <button type="button" class="btn btn-light" id="advanceFilterBtn"
                                            data-bs-toggle="modal" data-bs-target="#advancedFilterModal">
                                            <i class="fas fa-sliders-h"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Hidden fields for advanced filter options -->
                        <input type="hidden" id="jobType" name="jobType" value="@ViewBag.JobType">
                        <input type="hidden" id="experienceLevel" name="experienceLevel"
                            value="@ViewBag.ExperienceLevel">
                        <input type="hidden" id="minSalary" name="minSalary" value="@ViewBag.MinSalary">
                        <input type="hidden" id="maxSalary" name="maxSalary" value="@ViewBag.MaxSalary">
                        <input type="hidden" id="jobLevel" name="jobLevel" value="@ViewBag.JobLevel">
                        <input type="hidden" id="postedAfter" name="postedAfter" value="@ViewBag.PostedAfter">
                        <input type="hidden" id="pageSize" name="pageSize" value="@ViewBag.PageSize">

                        <!-- Company ID for filtering, if any -->
                        @if (ViewBag.CompanyId != null)
                        {
                            <input type="hidden" id="companyId" name="companyId" value="@ViewBag.CompanyId">
                        }
                    </form>

                    <div id="loading-indicator" class="text-center py-3" style="display: none;">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>

                    @await Component.InvokeAsync("AdvancedFilter", new {
                    jobType = ViewBag.JobType,
                                        experienceLevel = ViewBag.ExperienceLevel,
                                        minSalary = ViewBag.MinSalary,
                                        maxSalary = ViewBag.MaxSalary,
                                        jobLevel = ViewBag.JobLevel,
                                        postedAfter = ViewBag.PostedAfter
                                        })
                </div>
            </div>

        </div>
    </div>
    <!-- Job Listing Section -->
    <div class="job-listing container mt-4">

        <!-- Job Results Container (will be filled via AJAX) -->
        <div id="job-results">
            <!-- Initial content loaded on page load -->
            @await Html.PartialAsync("_JobListPartial", Model)
        </div>
    </div>
</div>
<style>
    /* Job Listing Styles */
    .job-header {
        background-color: #f8f9fa;
        padding: 15px 0;

    }

    .job-header h1 {
        font-size: 28px;
        font-weight: 600;
        margin-bottom: 10px;
    }

    .breadcrumb {
        background: transparent;
        padding: 0;
        margin: 0;
    }

    .search-section {
        margin-bottom: 30px;
    }

    .search-box {
        background-color: #fff;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.05);
    }

    .search-input {
        position: relative;

        font-size: 1.4rem;
        width: 100%;
        height: auto;
    }

    .search-input i {
        position: absolute;
        left: 15px;
        top: 50%;
        transform: translateY(-50%);
        color: var(--blue-300);
    }

    .search-input input,
    .search-input select {
        width: 100%;
        padding: 12px 15px 12px 40px;
        border: 1px solid #e0e0e0;
        border-radius: 5px;
        font-size: 1.4rem;
    }

    .find-btn {
        flex: 1;
        border-radius: 5px;
        height: 50px;
        padding: 12px 0;
        /* hoặc đặt chiều cao cụ thể giống với các nút khác */
    }

    .filter-tag {
        display: inline-block;
        background-color: #f8f9fa;
        padding: 5px 15px;
        border-radius: 30px;
        margin-right: 10px;
        font-size: 14px;
    }

    .filter-tag i {
        margin-left: 5px;
        cursor: pointer;
    }

    .job-card {
        background-color: #fff;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.05);
        height: 100%;
        transition: all 0.3s ease;
    }

    .job-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
    }

    .job-card.highlighted {
        border: 1px solid #0d6efd;
    }

    .company-info {
        display: flex;
        align-items: center;
        margin-bottom: 15px;
    }

    .company-logo {
        width: 50px;
        height: 50px;
        border-radius: 8px;
        overflow: hidden;
        margin-right: 15px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #f8f9fa;
    }

    .company-logo img {
        max-width: 100%;
        max-height: 100%;
    }

    .location {
        color: #6c757d;
        font-size: 14px;
        margin-bottom: 10px;
    }

    .job-title {
        font-size: 18px;
        font-weight: 600;

    }

    .job-meta {
        display: flex;

        color: #6c757d;
        font-size: 14px;
    }

    .pagination-container {
        display: flex;
        justify-content: center;
    }

    .pagination .page-item.active .page-link {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }

    .pagination .page-link {
        color: #0d6efd;
        border-radius: 50%;
        margin: 0 5px;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .view-options .btn {
        padding: 8px 12px;
    }

    .view-options .btn.active {
        background-color: #0d6efd;
        color: white;
    }
</style>

@section Scripts {
    <script src="~/js/utils.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Function to get form data as URL query string
            function getFormData() {
                const form = document.getElementById('jobFilterForm');
                return getFormDataAsQueryString(form);
            }

            // Function to load jobs via AJAX
            function loadJobs(page = 1) {
                const loadingIndicator = document.getElementById('loading-indicator');
                loadingIndicator.style.display = 'block';

                const formData = getFormData();
                const url = `/Job/JobList?${formData}&page=${page}`;

                fetch(url)
                    .then(response => response.text())
                    .then(html => {
                        document.getElementById('job-results').innerHTML = html;
                        loadingIndicator.style.display = 'none';

                        // Reattach event listeners to the new elements
                        attachViewToggleListeners();
                        attachPageNavigationListeners();
                        attachPageSizeListeners();
                    })
                    .catch(error => {
                        console.error('Error loading jobs:', error);
                        loadingIndicator.style.display = 'none';
                    });
            }

            // Create debounced version of loadJobs - 800ms wait
            const debouncedLoadJobs = debounce(loadJobs, 800);

            // Add event listeners to search inputs
            const searchInputs = document.querySelectorAll('.debounce-input');
            searchInputs.forEach(input => {
                input.addEventListener('input', function () {
                    debouncedLoadJobs();
                });

                // For select elements, use change event
                if (input.tagName === 'SELECT') {
                    input.addEventListener('change', function () {
                        debouncedLoadJobs();
                    });
                }
            });

            // Function to attach view toggle listeners
            function attachViewToggleListeners() {
                const viewButtons = document.querySelectorAll('.view-options button');
                const gridViewContainer = document.getElementById('grid-view-container');
                const listViewContainer = document.getElementById('list-view-container');

                viewButtons.forEach(button => {
                    button.addEventListener('click', function () {
                        // Remove active class from all buttons
                        viewButtons.forEach(btn => btn.classList.remove('active'));

                        // Add active class to clicked button
                        this.classList.add('active');

                        // Get the view type
                        const viewType = this.dataset.view;

                        // Toggle visibility
                        if (viewType === 'list') {
                            gridViewContainer.style.display = 'none';
                            listViewContainer.style.display = 'block';
                        } else {
                            gridViewContainer.style.display = 'flex';
                            listViewContainer.style.display = 'none';
                        }

                        // Save preference
                        localStorage.setItem('jobListingViewType', viewType);
                    });
                });

                // Apply saved preference
                const savedViewType = localStorage.getItem('jobListingViewType') || 'grid';
                const buttonToActivate = document.getElementById(`${savedViewType}-view-btn`);
                if (buttonToActivate) {
                    buttonToActivate.click();
                }
            }

            // Function to attach pagination listeners
            function attachPageNavigationListeners() {
                const pageLinks = document.querySelectorAll('.page-nav');
                pageLinks.forEach(link => {
                    link.addEventListener('click', function (e) {
                        e.preventDefault();
                        const page = this.dataset.page;
                        loadJobs(page);
                    });
                });
            }

            // Function to attach page size listeners
            function attachPageSizeListeners() {
                const pageSizeOptions = document.querySelectorAll('.page-size-option');
                pageSizeOptions.forEach(option => {
                    option.addEventListener('click', function (e) {
                        e.preventDefault();
                        const pageSize = this.dataset.pageSize;
                        document.getElementById('jobFilterForm').pageSize.value = pageSize;
                        loadJobs();
                    });
                });
            }

            // Initialize listeners
            attachViewToggleListeners();
            attachPageNavigationListeners();
            attachPageSizeListeners();

            // Advanced filter modal events
            const advancedFilterApplyBtn = document.getElementById('applyAdvancedFilter');
            if (advancedFilterApplyBtn) {
                advancedFilterApplyBtn.addEventListener('click', function () {
                    // Update hidden fields from modal inputs
                    const jobType = document.querySelector('input[name="jobTypeRadio"]:checked')?.value;
                    document.getElementById('jobType').value = jobType || '';

                    const experienceLevel = document.querySelector('input[name="experienceLevelRadio"]:checked')?.value;
                    document.getElementById('experienceLevel').value = experienceLevel || '';

                    const minSalary = document.getElementById('minSalaryRange')?.value;
                    document.getElementById('minSalary').value = minSalary || '';

                    const maxSalary = document.getElementById('maxSalaryRange')?.value;
                    document.getElementById('maxSalary').value = maxSalary || '';

                    // Load jobs with new filter
                    loadJobs();
                });
            }
        });
    </script>
}