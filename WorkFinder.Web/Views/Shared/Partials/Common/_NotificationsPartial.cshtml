@using Microsoft.AspNetCore.Identity
@using WorkFinder.Web.Models
@using WorkFinder.Web.Models.Enums
@using WorkFinder.Web.Repositories
@inject UserManager<ApplicationUser> UserManager
@inject INotificationRepository NotificationRepository
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery

@{
    var requestToken = Antiforgery.GetAndStoreTokens(Context);
    var user = await UserManager.GetUserAsync(User);
    var notifications = new List<Notification>();

    if (user != null)
    {
        try
        {
            notifications = (await NotificationRepository.GetNotificationsByUserIdAsync(user.Id.ToString(), 10)).ToList();
        }
        catch (Exception ex)
        {
            // Log the error (in a real app)
            Console.WriteLine($"Error loading notifications: {ex.Message}");
        }
    }

    string GetIconForNotificationType(NotificationType type)
    {
        return type switch
        {
            NotificationType.JobAlert => "fas fa-bell text-primary",
            NotificationType.ApplicationStatusChanged => "fas fa-file-alt text-info",
            NotificationType.NewApplicant => "fas fa-user text-success",
            NotificationType.ExpiringJob => "fas fa-exclamation-circle text-warning",
            NotificationType.SystemNotification => "fas fa-cog text-secondary",
            _ => "fas fa-bell text-secondary"
        };
    }
}

<style>
    .notification-item {
        padding: 12px 16px;
        border-bottom: 1px solid #eee;
        transition: all 0.2s ease;
        cursor: pointer;
        border-radius: 4px;
    }

    .notification-item:hover {
        background-color: #f8f9fa;
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }

    .notification-item.unread {
        background-color: #f0f7ff;
    }

    .notification-icon {
        width: 36px;
        height: 36px;
        border-radius: 50%;
        background-color: #e9ecef;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .notification-content {
        flex: 1;
    }

    .notification-title {
        font-size: 14px;
        font-weight: 600;
        margin-bottom: 2px;
    }

    .notification-message {
        font-size: 13px;
        color: #6c757d;
        margin-bottom: 0;
    }

    .notification-time {
        font-size: 12px;
        color: #adb5bd;
    }

    .no-notifications {
        padding: 20px;
        text-align: center;
        color: #6c757d;
    }
</style>

<input type="hidden" name="__RequestVerificationToken" value="@requestToken.RequestToken" />

@if (notifications.Any())
{
    foreach (var notification in notifications)
    {
        <div class="notification-item @(notification.IsRead ? "" : "unread") d-flex align-items-start"
            data-notification-id="@notification.Id" data-job-id="@notification.JobId" onclick="handleNotificationClick(this)">
            <div class="notification-icon me-3">
                <i class="@GetIconForNotificationType(notification.Type)"></i>
            </div>
            <div class="notification-content">
                <div class="notification-title">@notification.Title</div>
                <p class="notification-message">@notification.Message</p>
                <span class="notification-time">
                    @{
                        var timeDiff = DateTime.UtcNow - notification.CreatedAt;
                        string timeText;

                        if (timeDiff.TotalMinutes < 1)
                            timeText = "Just now";
                        else if (timeDiff.TotalMinutes < 60)
                            timeText = $"{(int)timeDiff.TotalMinutes} min ago";
                        else if (timeDiff.TotalHours < 24)
                            timeText = $"{(int)timeDiff.TotalHours} hours ago";
                        else if (timeDiff.TotalDays < 7)
                            timeText = $"{(int)timeDiff.TotalDays} days ago";
                        else
                            timeText = notification.CreatedAt.ToString("MMM dd, yyyy");
                    }
                    @timeText
                </span>
            </div>

            @if (!notification.IsRead)
            {
                <div class="ms-2">
                    <span class="badge rounded-pill bg-primary">New</span>
                </div>
            }
        </div>
    }

    <script>
        function handleNotificationClick(element) {
            const notificationId = element.getAttribute('data-notification-id');
            const jobId = element.getAttribute('data-job-id');

            // Mark notification as read via AJAX
            if (!element.classList.contains('read')) {
                markNotificationAsRead(notificationId);
            }

            // Redirect to job detail page if jobId exists
            if (jobId && jobId !== 'null' && jobId !== '') {
                window.location.href = '/Job+/' + jobId;
            } else {
                // If no specific jobId, redirect to the dashboard notifications page
                window.location.href = '/Dashboard/Notifications';
            }
        }

        function markNotificationAsRead(notificationId) {
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            fetch('/Notifications/MarkAsReadAjax/' + notificationId, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'X-CSRF-TOKEN': token
                },
                body: '__RequestVerificationToken=' + encodeURIComponent(token)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Update UI to show notification as read
                        const notification = document.querySelector(`.notification-item[data-notification-id="${notificationId}"]`);
                        if (notification) {
                            notification.classList.remove('unread');
                            const badge = notification.querySelector('.badge');
                            if (badge) {
                                badge.parentElement.remove();
                            }
                        }
                    }
                })
                .catch(error => console.error('Error marking notification as read:', error));
        }
    </script>
}
else
{
    <div class="no-notifications">
        <i class="fas fa-bell-slash mb-2 fs-4 text-muted"></i>
        <p>No notifications yet</p>
    </div>
}